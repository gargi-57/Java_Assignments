Part 1 - INPUT:
package pkg_Stack;

public interface Interface_STK {
int max = 10;

int top = 0;
void push(int item); // add item to the stack
int pop(); // remove and return the top item from the stack
int peek(); // return the top item from the stack without removing it
boolean isEmpty(); // check if the stack is empty
boolean isFull(); // check if the stack is full
void size();

void displayStack();

void displayTop();
}
public class Fixed_stk implements Interface_STK {
private final int[] stack;
private int top;

public Fixed_stk(int size) {
stack = new int[size];
top = -1;
}

@Override
public void push(int item) {
if (isFull()) {
System.out.println("Lab_6_1.Stack is full.");
} else {

stack[++top] = item;
System.out.println("Item inserted: " + item);
}
}

@Override
public int pop() {
if (isEmpty()) {
System.out.println("Lab_6_1.Stack is empty.");
} else {
int popped = stack[top--];
System.out.println("Item removed: " + popped);
}
return 0;
}

@Override
public int peek() {
if (isEmpty()) {
System.out.println("Lab_6_1.Stack is empty.");
return -1;
} else {
return stack[top];
}
}

@Override
public boolean isEmpty() {
return top == -1;
}

@Override
public boolean isFull() {
return top == stack.length - 1;
}

@Override
public void size(){
System.out.println("Size of the stack: " + (top + 1));
}

@Override
public void displayStack() {
System.out.println("Contents of the stack:");
if (isEmpty()) {
System.out.println("Empty stack");
} else {
System.out.print("Lab_6_1.Stack : ");
for (int i = top; i >= 0; i--) {
System.out.print(stack[i] + " ");
}
System.out.println();

}
}

@Override
public void displayTop() {
if (isEmpty()) {
System.out.println("Lab_6_1.Stack is empty.");
} else {
System.out.println("Top item in the stack: " + stack[top]);
}
}
}
public class Growable_stk implements Interface_STK {
private final ArrayList<Integer> stack;
private int top;

public Growable_stk() {
stack = new ArrayList<Integer>();
top = -1;
}

@Override
public void push(int item) {
stack.add(++top, item);

}

@Override
public int pop() {
if (isEmpty()) {
System.out.println("Lab_6_1.Stack is empty.");
} else {
int popped = stack.remove(top--);
System.out.println("Item removed: " + popped);
}
return 0;
}

@Override
public int peek() {
if (isEmpty()) {
System.out.println("Lab_6_1.Stack is empty.");
return -1;
} else {
return stack.get(top);
}
}

@Override

public boolean isEmpty() {

return top == -1;
}

@Override
public boolean isFull() {
System.out.println("Not valid for growable stack.");
return false;
}

@Override
public void size(){
System.out.println("Size of the stack: " + (top + 1));
}

@Override
public void displayStack() {
System.out.println("Contents of the stack:");
if (isEmpty()) {
System.out.println("Empty stack");
} else
{
System.out.println("Lab_6_1.Stack :" + stack.toString());
}
}

@Override
public void displayTop() {
if (isEmpty()) {
System.out.println("Lab_6_1.Stack is empty.");
} else {
System.out.println("Top item in the stack: " + stack.get(top));
}
}
}
mport java.util.Scanner;

public class Stack {
public static void main(String[] arg){

while (true) {
System.out.println("*************** Stack Menu
*****************");
System.out.println("1. Fixed Stack Operations");
System.out.println("2. Growable Stack Operations");
System.out.println("3. Exit");
System.out.print("Enter your choice:");

Scanner input = new Scanner(System.in);
int choice = input.nextInt();

switch (choice) {

case 1:
boolean condition = true;
System.out.println("*************** Fixed Stack
*****************");
// read stack size from user
System.out.print("Enter the size of the stack: ");
int size = input.nextInt();
// create a new Fixed Stack object
Fixed_stk fixedStack = new Fixed_stk(size);
System.out.println("*********Fixed Stack initialized with size
"+size +"*********");
while (condition) {
System.out.println("*************** Fixed Stack Menu
*****************");
System.out.println("1. Push item to Fixed Stack");
System.out.println("2. Pop item from Fixed Stack");
System.out.println("3. Peek at top item in Fixed Stack");
System.out.println("4. Display contents of Fixed Stack");
System.out.println("5. Back to Main Menu");
System.out.print("Enter your choice:");

int fixedChoice = input.nextInt();

switch (fixedChoice) {
case 1:
// pushing item to Fixed Stack

System.out.print("Enter the item to be pushed to the stack:
");
int item = input.nextInt();
fixedStack.push(item);
// display the top item
fixedStack.displayTop();
// display the stack
fixedStack.displayStack();
break;

case 2:
// popping item from Fixed Stack
fixedStack.pop();
// display the top item
fixedStack.displayTop();
// display the stack
fixedStack.displayStack();
break;

case 3:
// peeking at top item in Fixed Stack
fixedStack.peek();
break;

case 4:
// displaying contents of Fixed Stack
fixedStack.displayStack();

break;

case 5:
// Exit from Fixed Stack menu
System.out.println("Exiting from Fixed Stack menu...");
condition = false;
break;

default:
System.out.println("Invalid choice. Please try again.");
break;
}

}

case 2:
condition = true;
System.out.println("*************** Growable Stack
*****************");

Growable_stk growableStack = new Growable_stk();
while (condition) {

System.out.println("*************** Growable Stack Menu
*****************");
System.out.println("1. Push item to Growable Stack");

System.out.println("2. Pop item from Growable Stack");
System.out.println("3. Peek at top item in Growable Stack");
System.out.println("4. Display contents of Growable Stack");
System.out.println("5. Back to Main Menu");
System.out.print("Enter your choice:");

int growableChoice = input.nextInt();

switch (growableChoice) {
case 1:
// pushing item to Growable Stack
System.out.print("Enter the item to be pushed to the stack:
");
int item = input.nextInt();
growableStack.push(item);
// display the top item
growableStack.displayTop();
// display the stack
growableStack.displayStack();
break;

case 2:
// popping item from Growable Stack
growableStack.pop();
// display the top item
growableStack.displayTop();
// display the stack

growableStack.displayStack();
break;

case 3:
// peeking at top item in Growable Stack
growableStack.peek();
break;

case 4:
// displaying contents of Growable Stack
growableStack.displayStack();
break;

case 5:
// Exit from Growable Stack menu
System.out.println("Exiting from Growable Stack menu...");
condition = false;
break;

default:
System.out.println("Invalid choice. Please try again.");
break;
}

}
break;

case 3:
// Add code to exit the program here
System.out.println("Exiting from the program...");
System.exit(0);
break;

default:
System.out.println("Invalid choice. Please try again.");
break;
}
}

}
}

#Part 2

import java.util.Scanner;

public class Student {
String name;
int rollNumber;
int dm, java, usml, sml;
Scanner stringInput = new Scanner(System.in);
Scanner intInput = new Scanner(System.in);

public Student() {
name = "";
rollNumber = 0;
dm = java = usml = sml = 0;
}

Student(String name, int rollNumber, int dm, int java, int usml, int sml) {
this.name = name;
this.rollNumber = rollNumber;
this.dm = dm;
this.java = java;
this.usml = usml;
this.sml = sml;
}

public String getName() {
return name;
}

public void setName(String name) {
this.name = name;
}

public int getRollNumber() {
return rollNumber;
}

public void setRollNumber(int rollNumber) {
this.rollNumber = rollNumber;
}

public int getDm() {
return dm;
}

public void setDm(int dm) {
this.dm = dm;
}

public int getJava() {

return java;
}

public void setJava(int java) {
this.java = java;
}

public int getUsml() {
return usml;
}

public void setUsml(int usml) {
this.usml = usml;
}

public int getsml() {
return sml;
}

public void setSml(int sml) {
this.sml = sml;
}

void getData() {
System.out.print("Enter your name: ");
name = stringInput.nextLine();

System.out.print("Enter your roll number: ");
rollNumber = intInput.nextInt();
System.out.print("Enter your marks in DM: ");
dm = intInput.nextInt();
System.out.print("Enter your marks in USML: ");
usml = intInput.nextInt();
System.out.print("Enter your marks in JAVA: ");
java = intInput.nextInt();
System.out.print("Enter your marks in SML: ");
sml = intInput.nextInt();
}

void displayData() {
System.out.println("\n-------YOUR INFO-------");
System.out.println("NAME: " + name);
System.out.println("ROLL NUMBER: " + rollNumber);
System.out.println("Marks in DM: " + dm);
System.out.println("Marks in USML: " + usml);
System.out.println("Marks in SML: " + sml);
System.out.println("Marks in JAVA: "+ java);
}
}

public class Result extends Student implements Exam {
public static void main(String[] args) {
Result result = new Result();

result.getData();
result.displayData();
double per = result.calculatePercentage();
System.out.println("PERCENTAGE: " + per);
}

@Override
public double calculatePercentage() {
int total = usml + java + sml + dm;
return (double) total/4;
}
}
public interface Exam {
double calculatePercentage();
}
